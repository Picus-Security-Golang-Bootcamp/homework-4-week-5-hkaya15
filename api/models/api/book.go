// Code generated by go-swagger; DO NOT EDIT.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Book book
//
// swagger:model Book
type Book struct {

	// author
	Author interface{} `json:"author,omitempty"`

	// authorid
	// Required: true
	Authorid *int64 `json:"authorid"`

	// bookid
	// Required: true
	Bookid *string `json:"bookid"`

	// bookname
	// Required: true
	Bookname *string `json:"bookname"`

	// isbn
	Isbn int64 `json:"isbn,omitempty"`

	// page
	Page int64 `json:"page,omitempty"`

	// price
	Price float32 `json:"price,omitempty"`

	// stockcount
	Stockcount int64 `json:"stockcount,omitempty"`

	// stockid
	Stockid int64 `json:"stockid,omitempty"`
}

// Validate validates this book
func (m *Book) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBookid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBookname(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Book) validateAuthorid(formats strfmt.Registry) error {

	if err := validate.Required("authorid", "body", m.Authorid); err != nil {
		return err
	}

	return nil
}

func (m *Book) validateBookid(formats strfmt.Registry) error {

	if err := validate.Required("bookid", "body", m.Bookid); err != nil {
		return err
	}

	return nil
}

func (m *Book) validateBookname(formats strfmt.Registry) error {

	if err := validate.Required("bookname", "body", m.Bookname); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this book based on context it is used
func (m *Book) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Book) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Book) UnmarshalBinary(b []byte) error {
	var res Book
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
